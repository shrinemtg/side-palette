---
description: 
globs: src/pages/**/*.tsx,src/components/**/*.tsx,*.tsx
alwaysApply: false
---
 # nextjs-rules.mdc
---
description: Apply this rule to the entire repository
globs:
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

# Next.js ベストプラクティス実装ルール
# Next.js ベストプラクティス実装ルール

## 1. ルーティングとファイル構造

### 選択基準
- 小中規模でCSR中心なら `pages` Router を採用
- 初期表示速度やSEO、スケーラビリティが必要なら `app` Router を段階的に導入

### ディレクトリ構造例（pages Routerベース）
（ここにプロジェクトのディレクトリ構成例を記載）

## 2. コンポーネント設計

### 基本原則

- デフォルトは **Client Components（CSR）**
- SEOが必要 or 事前にデータ取得したいページは **getStaticProps** を使った SSG
- App Router 導入時は SEOや初期表示に Server Components を活用

### 'use client' ディレクティブ
```typescript
"use client";
// クライアントコンポーネントの先頭に記述
```

## 3. API実装
- GET APIはなるべく避け、SSG（静的生成）やISRを活用
- POST/PATCH/PUT/DELETE のみ API Route で実装
- 認証やフォーム処理など一部は `pages/api` または `app/api` を使用

```typescript
// app/api/articles/route.ts
import { NextResponse } from "next/server";

// POST: 新規記事の作成
export async function POST(request: Request) {
  try {
    const data = await request.json();
    const article = await prisma.article.create({
      data,
    });
    return NextResponse.json(article, { status: 201 });
  } catch (error) {
    return NextResponse.json(
      { error: "Internal Server Error" },
      { status: 500 }
    );
  }
}
```

### クライアントサイドでのユーザーデータ操作
- `fetch` を使用して API を呼び出し
- エラーハンドリングとローディング状態の管理:
- ServerActionsでも可

```typescript
// components/articles/create-article.tsx
"use client";

export async function createArticle(data: ArticleData) {
  try {
    const response = await fetch("/api/articles", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });

    if (!response.ok) {
      throw new Error("API request failed");
    }

    return await response.json();
  } catch (error) {
    console.error("Error creating article:", error);
    throw error;
  }
}
```

### キャッシュと再検証
- デフォルトでキャッシュを活用
- 適切な再検証戦略を選択:

```typescript
// ISRの場合
fetch(url, { next: { revalidate: 3600 } }); // 1時間ごとに再検証

// キャッシュを無効化する場合
fetch(url, { cache: "no-store" });
```

### エラーハンドリング
- API レスポンスには適切なステータスコードとエラーメッセージを含める
- クライアントサイドでは適切なエラーハンドリングとユーザーフィードバックを実装
- try-catch ブロックを使用して例外を適切に処理

### セキュリティ
- API ルートでは適切な認証・認可チェックを実装
- 入力値のバリデーションを実施、特にサーバーサイドでのバリデーション
- レートリミットの実装を検討

## 4. パフォーマンス最適化

### 画像最適化
- `next/image`コンポーネントを使用

```typescript
import Image from "next/image";

<Image
  src="/path/to/image.jpg"
  alt="説明"
  width={800}
  height={600}
  priority={true} // 重要な画像の場合
/>;
```

### スクリプト最適化
- `next/script`を使用して外部スクリプトを最適化

```typescript
import Script from "next/script";

<Script src="https://example.com/script.js" strategy="lazyOnload" />;
```

## 5. エラーハンドリング

### エラーバウンダリ
- `error.tsx`ファイルでエラーをキャッチ
- ユーザーフレンドリーなエラーメッセージを表示

### ローディング状態
- `loading.tsx`でローディング状態を管理
- Suspense を使用して細かい粒度でローディングを制御

## 6. 型安全性

### TypeScript
- 厳格な型チェックを有効化

```json
{
  "compilerOptions": {
    "strict": true,
    "forceConsistentCasingInFileNames": true
  }
}
```

### API ルート
- リクエスト/レスポンスの型を定義

```typescript
type ResponseData = {
  message: string;
};
```

## 7. セキュリティ

### 環境変数
- 機密情報は`.env`に保存
- 公開する環境変数は`NEXT_PUBLIC_`プレフィックスを使用

### CSP (Content Security Policy)
- 適切な CSP ヘッダーを設定
- `next.config.js`でセキュリティヘッダーを構成

## 8. デプロイメント

### ビルド最適化
- 本番環境では常に本番ビルドを使用
- 適切なキャッシュ戦略を実装

### 環境変数
- 環境ごとに適切な環境変数を設定
- 本番環境の環境変数は安全に管理

## 10. メンテナンス

### 依存関係
- 定期的に依存パッケージを更新
- セキュリティ脆弱性をモニタリング

### パフォーマンスモニタリング
- Core Web Vitals を定期的に確認
- エラーログを監視
